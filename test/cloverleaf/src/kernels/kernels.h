// SPDX-License-Identifier: GPL-3.0-or-later
// Copyright (C) 2022 Niccol√≤ Betto

#pragma once

#include <stdbool.h>

// As this is a public header, we need to include the types used outside of the kernels
#include "../types/data.h"

extern void kernel_initialise_chunk(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double min_x,
    double min_y,
    double d_x,
    double d_y,
    double *vertexx,
    double *vertexdx,
    double *vertexy,
    double *vertexdy,
    double *cellx,
    double *celldx,
    double *celly,
    double *celldy,
    double *volume,
    double *xarea,
    double *yarea
);

extern void kernel_generate_chunk(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *vertexx,
    double *vertexy,
    double *cellx,
    double *celly,
    double *density0,
    double *energy0,
    double *xvel0,
    double *yvel0,
    int number_of_states,
    double *state_density,
    double *state_energy,
    double *state_xvel,
    double *state_yvel,
    double *state_xmin,
    double *state_xmax,
    double *state_ymin,
    double *state_ymax,
    double *state_radius,
    int *state_geometry
);

extern void kernel_ideal_gas(
    int x_min, int x_max, int y_min, int y_max, double *density, double *energy, double *pressure, double *soundspeed
);

extern void kernel_update_halo(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    int chunk_neighbours[static 4],
    int tile_neighbours[static 4],
    double *density0,
    double *energy0,
    double *pressure,
    double *viscosity,
    double *soundspeed,
    double *density1,
    double *energy1,
    double *xvel0,
    double *yvel0,
    double *xvel1,
    double *yvel1,
    double *vol_flux_x,
    double *vol_flux_y,
    double *mass_flux_x,
    double *mass_flux_y,
    int fields[static NUM_FIELDS],
    int depth
);

extern void kernel_field_summary(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *volume,
    double *density0,
    double *energy0,
    double *pressure,
    double *xvel0,
    double *yvel0,
    double *vol,
    double *mass,
    double *ie,
    double *ke,
    double *press
);

extern void kernel_viscosity(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *celldx,
    double *celldy,
    double *density0,
    double *pressure,
    double *viscosity,
    double *xvel0,
    double *yvel0
);

extern void kernel_calc_dt(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double min_dt,
    double dtc_safe,
    double dtu_safe,
    double dtv_safe,
    double dtdiv_safe,
    double *xarea,
    double *yarea,
    double *cellx,
    double *celly,
    double *celldx,
    double *celldy,
    double *volume,
    double *density0,
    double *energy0,
    double *pressure,
    double *viscosity,
    double *soundspeed,
    double *xvel0,
    double *yvel0,
    double *dt_min,
    double *dtminval,
    int *dtlcontrol,
    double *xlpos,
    double *ylpos,
    int *jldt,
    int *kldt,
    int smll
);

extern void kernel_pdv(
    bool predict,
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double dt,
    double *xarea,
    double *yarea,
    double *volume,
    double *density0,
    double *density1,
    double *energy0,
    double *energy1,
    double *pressure,
    double *viscosity,
    double *xvel0,
    double *xvel1,
    double *yvel0,
    double *yvel1,
    double *volume_change
);

extern void kernel_revert(
    int x_min, int x_max, int y_min, int y_max, double *density0, double *density1, double *energy0, double *energy1
);

extern void kernel_accelerate(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double dt,
    double *xarea,
    double *yarea,
    double *volume,
    double *density0,
    double *pressure,
    double *viscosity,
    double *xvel0,
    double *yvel0,
    double *xvel1,
    double *yvel1
);

extern void kernel_flux_calc(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double dt,
    double *xarea,
    double *yarea,
    double *xvel0,
    double *yvel0,
    double *xvel1,
    double *yvel1,
    double *vol_flux_x,
    double *vol_flux_y
);

extern void kernel_advec_cell(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    int dir,
    int sweep_number,
    double *vertexdx,
    double *vertexdy,
    double *volume,
    double *density1,
    double *energy1,
    double *mass_flux_x,
    double *vol_flux_x,
    double *mass_flux_y,
    double *vol_flux_y,
    double *pre_vol,
    double *post_vol,
    double *pre_mass,
    double *post_mass,
    double *advec_vol,
    double *post_ener,
    double *ener_flux
);

extern void kernel_advec_mom(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *vel1,
    double *mass_flux_x,
    double *vol_flux_x,
    double *mass_flux_y,
    double *vol_flux_y,
    double *volume,
    double *density1,
    double *node_flux,
    double *node_mass_post,
    double *node_mass_pre,
    double *mom_flux,
    double *pre_vol,
    double *post_vol,
    double *celldx,
    double *celldy,
    int which_vel,
    int sweep_number,
    int direction
);

extern void kernel_reset_field(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *density0,
    double *density1,
    double *energy0,
    double *energy1,
    double *xvel0,
    double *xvel1,
    double *yvel0,
    double *yvel1
);

extern void kernel_update_tile_halo_l(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *density0,
    double *energy0,
    double *pressure,
    double *viscosity,
    double *soundspeed,
    double *density1,
    double *energy1,
    double *xvel0,
    double *yvel0,
    double *xvel1,
    double *yvel1,
    double *vol_flux_x,
    double *vol_flux_y,
    double *mass_flux_x,
    double *mass_flux_y,
    int left_xmin,
    int left_xmax,
    int left_ymin,
    int left_ymax,
    double *left_density0,
    double *left_energy0,
    double *left_pressure,
    double *left_viscosity,
    double *left_soundspeed,
    double *left_density1,
    double *left_energy1,
    double *left_xvel0,
    double *left_yvel0,
    double *left_xvel1,
    double *left_yvel1,
    double *left_vol_flux_x,
    double *left_vol_flux_y,
    double *left_mass_flux_x,
    double *left_mass_flux_y,
    int fields[static NUM_FIELDS],
    int depth
);

extern void kernel_update_tile_halo_r(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *density0,
    double *energy0,
    double *pressure,
    double *viscosity,
    double *soundspeed,
    double *density1,
    double *energy1,
    double *xvel0,
    double *yvel0,
    double *xvel1,
    double *yvel1,
    double *vol_flux_x,
    double *vol_flux_y,
    double *mass_flux_x,
    double *mass_flux_y,
    int right_xmin,
    int right_xmax,
    int right_ymin,
    int right_ymax,
    double *right_density0,
    double *right_energy0,
    double *right_pressure,
    double *right_viscosity,
    double *right_soundspeed,
    double *right_density1,
    double *right_energy1,
    double *right_xvel0,
    double *right_yvel0,
    double *right_xvel1,
    double *right_yvel1,
    double *right_vol_flux_x,
    double *right_vol_flux_y,
    double *right_mass_flux_x,
    double *right_mass_flux_y,
    int fields[static NUM_FIELDS],
    int depth
);

extern void kernel_update_tile_halo_t(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *density0,
    double *energy0,
    double *pressure,
    double *viscosity,
    double *soundspeed,
    double *density1,
    double *energy1,
    double *xvel0,
    double *yvel0,
    double *xvel1,
    double *yvel1,
    double *vol_flux_x,
    double *vol_flux_y,
    double *mass_flux_x,
    double *mass_flux_y,
    int top_xmin,
    int top_xmax,
    int top_ymin,
    int top_ymax,
    double *top_density0,
    double *top_energy0,
    double *top_pressure,
    double *top_viscosity,
    double *top_soundspeed,
    double *top_density1,
    double *top_energy1,
    double *top_xvel0,
    double *top_yvel0,
    double *top_xvel1,
    double *top_yvel1,
    double *top_vol_flux_x,
    double *top_vol_flux_y,
    double *top_mass_flux_x,
    double *top_mass_flux_y,
    int fields[static NUM_FIELDS],
    int depth
);

extern void kernel_update_tile_halo_b(
    int x_min,
    int x_max,
    int y_min,
    int y_max,
    double *density0,
    double *energy0,
    double *pressure,
    double *viscosity,
    double *soundspeed,
    double *density1,
    double *energy1,
    double *xvel0,
    double *yvel0,
    double *xvel1,
    double *yvel1,
    double *vol_flux_x,
    double *vol_flux_y,
    double *mass_flux_x,
    double *mass_flux_y,
    int bottom_xmin,
    int bottom_xmax,
    int bottom_ymin,
    int bottom_ymax,
    double *bottom_density0,
    double *bottom_energy0,
    double *bottom_pressure,
    double *bottom_viscosity,
    double *bottom_soundspeed,
    double *bottom_density1,
    double *bottom_energy1,
    double *bottom_xvel0,
    double *bottom_yvel0,
    double *bottom_xvel1,
    double *bottom_yvel1,
    double *bottom_vol_flux_x,
    double *bottom_vol_flux_y,
    double *bottom_mass_flux_x,
    double *bottom_mass_flux_y,
    int fields[static NUM_FIELDS],
    int depth
);
